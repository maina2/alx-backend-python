# Name of the workflow, displayed in the GitHub Actions UI
name: Django CI/CD

# Events that trigger this workflow
on:
  push:
    branches:
      - main # Trigger on pushes to the main branch
      - master # Or master, if that's your primary branch
  pull_request:
    branches:
      - main # Trigger on pull requests targeting the main branch
      - master # Or master

# Jobs to be executed in this workflow
jobs:
  test:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Services allow you to create companion containers for your job
    services:
      mysql:
        image: mysql:8.0 # Use MySQL 8.0 image
        env:
          MYSQL_ROOT_PASSWORD: root_password # Set a root password for MySQL
          MYSQL_DATABASE: test_db # Define the database name for testing
        ports:
          - 3306:3306 # Map MySQL port from container to host
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=10 # Health check to ensure MySQL is ready

    # Steps define the sequence of tasks to be executed in the job
    steps:
      - name: Checkout code
        uses: actions/checkout@v4 # Action to checkout your repository code

      - name: Set up Python 3.9
        uses: actions/setup-python@v5 # Action to set up Python environment
        with:
          python-version: '3.9' # Specify the Python version

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip # Upgrade pip
          pip install -r messaging_app/requirements.txt # Install dependencies from your requirements file

      - name: Wait for MySQL to be ready
        # This loop waits until the MySQL service is accessible and ready to accept connections
        run: |
          max_retries=10
          retry_count=0
          while ! mysqladmin ping -h 127.0.0.1 -P 3306 --silent; do
            if [ $retry_count -ge $max_retries ]; then
              echo "MySQL did not become ready after $max_retries attempts."
              exit 1
            fi
            echo "Waiting for MySQL to be ready..."
            sleep 5
            retry_count=$((retry_count+1))
          done
          echo "MySQL is ready!"

      - name: Set up Django environment variables
        run: |
          # These environment variables tell Django how to connect to the MySQL database
          echo "DATABASE_URL=mysql://root:root_password@127.0.0.1:3306/test_db" >> $GITHUB_ENV
          echo "DJANGO_SETTINGS_MODULE=messaging_app.settings" >> $GITHUB_ENV # Adjust if your settings file is elsewhere

      - name: Run Django migrations (if any)
        # It's often good practice to run migrations before tests, especially if tests rely on database schema
        run: |
          cd messaging_app # Navigate into your Django project directory
          python manage.py migrate --noinput
        working-directory: ./messaging_app # Ensure this step runs from the correct directory

      - name: Run tests with Pytest
        run: |
          cd messaging_app # Navigate into your Django project directory
          python -m pytest --junitxml=test-results.xml # Run pytest and generate a JUnit XML report
        working-directory: ./messaging_app # Ensure this step runs from the correct directory

      - name: Upload test results
        uses: actions/upload-artifact@v4 # Action to upload generated artifacts
        with:
          name: test-results # Name of the artifact
          path: messaging_app/test-results.xml # Path to the test report file
